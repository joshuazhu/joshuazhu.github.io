<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Josh ZHU</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-04-25T08:16:29.158Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Josh ZHU</name>
    <email>josh.huazhu@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>web全栈工程师自我修养 5 全栈思维</title>
    <link href="http://yoursite.com/2016/04/25/Full%20stack%20developer%205/"/>
    <id>http://yoursite.com/2016/04/25/Full stack developer 5/</id>
    <published>2016-04-25T08:16:29.158Z</published>
    <updated>2016-04-25T08:16:29.158Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1-责任&quot;&gt;&lt;a href=&quot;#1-责任&quot; class=&quot;headerlink&quot; title=&quot;1. 责任&quot;&gt;&lt;/a&gt;1. 责任&lt;/h2&gt;&lt;p&gt;在职场中，评估一个人并不是根据他的能力，而是他能承担的责任。一个人在项目中担起了责任，就是一个有责任心的人，就能委以重任。&lt;/p&gt;
&lt;h2 id=&quot;2-学一点管理&quot;&gt;&lt;a href=&quot;#2-学一点管理&quot; class=&quot;headerlink&quot; title=&quot;2. 学一点管理&quot;&gt;&lt;/a&gt;2. 学一点管理&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在最开始时做出合理的时间评估。&lt;/li&gt;
&lt;li&gt;根据人员的强项来安排任务。&lt;/li&gt;
&lt;li&gt;唤起下属对于项目成功的渴望。 &lt;strong&gt;领导者的本质工作是对内销售，销售的内容就是团队目标&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;善于沟通。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;好的管理者能让平凡的员工做不平凡的事&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-有效管理者的5个思维习惯-Ref：《卓有成效的管理者》《The-Effective-Executive》&quot;&gt;&lt;a href=&quot;#3-有效管理者的5个思维习惯-Ref：《卓有成效的管理者》《The-Effective-Executive》&quot; class=&quot;headerlink&quot; title=&quot;3. 有效管理者的5个思维习惯 Ref：《卓有成效的管理者》《The Effective Executive》&quot;&gt;&lt;/a&gt;3. 有效管理者的5个思维习惯 &lt;strong&gt;Ref：《卓有成效的管理者》《The Effective Executive》&lt;/strong&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;知道他们的时间用在什么地方。&lt;/li&gt;
&lt;li&gt;重视对外界的贡献&lt;/li&gt;
&lt;li&gt;善于利用长处，包括自己的长处，上司的长处，同事的长处和下属的长处。&lt;/li&gt;
&lt;li&gt;有效的管理者集中精力与少数重要的领域，在这少数重要的领域中，如果能有优秀的绩效就可以产生卓越的成果。&lt;/li&gt;
&lt;li&gt;有效的管理者必须善于做有效的决策。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;4-沟通&quot;&gt;&lt;a href=&quot;#4-沟通&quot; class=&quot;headerlink&quot; title=&quot;4. 沟通&quot;&gt;&lt;/a&gt;4. 沟通&lt;/h2&gt;&lt;p&gt;“针对目标听众” “有方法的” “表达自己的想法”&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;针对目标听众&lt;br&gt; a. 同事：度己度人。 授权给平级同事的时候，最好的方法就是&lt;strong&gt;诉诸对方的利益&lt;/strong&gt;。&lt;br&gt; b. 领导：汇报，请求，询问。 在20秒内让他知道你的目标。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有方法&lt;br&gt; a. 金字塔方法（一个中心论点，3到7个论据）&lt;br&gt; b. 战地记者原则： 一分钟内说明当前情况，不超过三句话然后发表出去。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;表达自己的想法&lt;br&gt; a. 自己要表达的立场足够简单&lt;br&gt; b. 围绕着着唯一的立场去沟通。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-责任&quot;&gt;&lt;a href=&quot;#1-责任&quot; class=&quot;headerlink&quot; title=&quot;1. 责任&quot;&gt;&lt;/a&gt;1. 责任&lt;/h2&gt;&lt;p&gt;在职场中，评估一个人并不是根据他的能力，而是他能承担的责任。一个人在项目中担起了责任，就是一个有责任心的人，就能委以重任
    
    </summary>
    
      <category term="Self improvement" scheme="http://yoursite.com/categories/Self-improvement/"/>
    
    
      <category term="Developer" scheme="http://yoursite.com/tags/Developer/"/>
    
      <category term="Management" scheme="http://yoursite.com/tags/Management/"/>
    
  </entry>
  
  <entry>
    <title>web全栈工程师自我修养 4 高效工程师</title>
    <link href="http://yoursite.com/2016/04/25/Full%20stack%20developer%204/"/>
    <id>http://yoursite.com/2016/04/25/Full stack developer 4/</id>
    <published>2016-04-25T08:16:11.639Z</published>
    <updated>2016-04-25T08:16:11.639Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1-时间管理四象限&quot;&gt;&lt;a href=&quot;#1-时间管理四象限&quot; class=&quot;headerlink&quot; title=&quot;1. 时间管理四象限&quot;&gt;&lt;/a&gt;1. 时间管理四象限&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;time management four quadrants.jpg&quot; alt=&quot;time management four quadrants&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;重要又紧迫的事情： 用自己最好的判断力，立即执行。 但是这一象限的问题往往是第二象限没有制定好计划而滑落过来的。如果大部分工作都落在第一象限，说明是在“瞎忙”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重要但不紧急的事情。 &lt;strong&gt; 把80%的工作头遇到该象限 &lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;紧急但是不重要的事情。比如会议、可转交的需求。往往会因为对方强烈的呼声认为她处于第一象限。花很多时间其实只在满足他人的需求，没有关注自己的职责。对于这种事情应该请别人代劳。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不重要也不紧急的事情： 尽量少做。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;2-给自己流出不被打扰的时间&quot;&gt;&lt;a href=&quot;#2-给自己流出不被打扰的时间&quot; class=&quot;headerlink&quot; title=&quot;2. 给自己流出不被打扰的时间&quot;&gt;&lt;/a&gt;2. 给自己流出不被打扰的时间&lt;/h3&gt;&lt;h3 id=&quot;3-番茄工作法：&quot;&gt;&lt;a href=&quot;#3-番茄工作法：&quot; class=&quot;headerlink&quot; title=&quot;3. 番茄工作法：&quot;&gt;&lt;/a&gt;3. 番茄工作法：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;短迭代工作方法.&lt;/li&gt;
&lt;li&gt;早上工作之前可以花一个小时跑步或者健身。&lt;/li&gt;
&lt;li&gt;25分钟为一个番茄时间，专注工作，直到番茄时钟想起。短暂休息一下（5分钟）。 每4个番茄时段多休息一会儿。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;4-跨界思考&quot;&gt;&lt;a href=&quot;#4-跨界思考&quot; class=&quot;headerlink&quot; title=&quot;4. 跨界思考&quot;&gt;&lt;/a&gt;4. 跨界思考&lt;/h3&gt;&lt;p&gt;跨界学习： 初级设计师和初级开发者之间可以频繁交流&lt;/p&gt;
&lt;h3 id=&quot;5-纸上头脑风暴&quot;&gt;&lt;a href=&quot;#5-纸上头脑风暴&quot; class=&quot;headerlink&quot; title=&quot;5. 纸上头脑风暴&quot;&gt;&lt;/a&gt;5. 纸上头脑风暴&lt;/h3&gt;&lt;p&gt;在电脑工作之前，先在纸上画出自己的想法。&lt;code&gt;笔和纸是最灵活、最容易修改、成本最低的头脑风暴方式&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在写代码之前，把每一步主要工作写下来，类似伪代码。&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-时间管理四象限&quot;&gt;&lt;a href=&quot;#1-时间管理四象限&quot; class=&quot;headerlink&quot; title=&quot;1. 时间管理四象限&quot;&gt;&lt;/a&gt;1. 时间管理四象限&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;time management four quadrants
    
    </summary>
    
      <category term="Self improvement" scheme="http://yoursite.com/categories/Self-improvement/"/>
    
    
      <category term="Developer" scheme="http://yoursite.com/tags/Developer/"/>
    
      <category term="Management" scheme="http://yoursite.com/tags/Management/"/>
    
  </entry>
  
  <entry>
    <title>web全栈工程师自我修养 1 高性能网站关键:缓存</title>
    <link href="http://yoursite.com/2016/04/25/Full%20stack%20developer%201/"/>
    <id>http://yoursite.com/2016/04/25/Full stack developer 1/</id>
    <published>2016-04-25T08:15:15.376Z</published>
    <updated>2016-04-25T08:15:15.376Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1-数据库查询缓存&quot;&gt;&lt;a href=&quot;#1-数据库查询缓存&quot; class=&quot;headerlink&quot; title=&quot;1. 数据库查询缓存&quot;&gt;&lt;/a&gt;1. 数据库查询缓存&lt;/h2&gt;&lt;p&gt;Mysql 缓存&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;--SIZE: 缓存块大小，默认值为0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;query_cache_size = SIZE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- OPTION： 查询缓存类型 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 0 =&amp;gt; 不缓存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 1 =&amp;gt; 缓存除 SELECT S_NO_CACHE 之外的所有结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 2 =&amp;gt; 只缓存 SELECT SQL_CACHE 开始的查询结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;query_cache_type = OPTION&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;&lt;br&gt;Mysql缓存只对两次SQL文本完全相同的查询才有效&lt;/p&gt;
&lt;h2 id=&quot;2-扩展数据库查询：-memcached&quot;&gt;&lt;a href=&quot;#2-扩展数据库查询：-memcached&quot; class=&quot;headerlink&quot; title=&quot;2. 扩展数据库查询： memcached&quot;&gt;&lt;/a&gt;2. 扩展数据库查询： memcached&lt;/h2&gt;&lt;p&gt;memcached是一个高性能分布式内存对象缓存系统。 普通数据库查询缓存的设计是： 只要表发生了&lt;strong&gt;更新操作，缓存就会失效&lt;/strong&gt;。 不同的是，memcached的缓存是==&lt;strong&gt;按照时间过期的&lt;/strong&gt;==。memcached存储时设置了一个过期时间，只要时间不到，程序就会从memcached中获取数据 （&lt;strong&gt;获得的数据并不是最“新鲜”的&lt;/strong&gt;）。&lt;/p&gt;
&lt;h2 id=&quot;3-文件缓存&quot;&gt;&lt;a href=&quot;#3-文件缓存&quot; class=&quot;headerlink&quot; title=&quot;3.文件缓存&quot;&gt;&lt;/a&gt;3.文件缓存&lt;/h2&gt;&lt;p&gt;可以将频繁访问的数据存在文件中。文件缓存可以作为内存缓存的补充，访问顺序为： &lt;strong&gt;内存缓存-&amp;gt;文件缓存-&amp;gt;数据库&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;4-静态化&quot;&gt;&lt;a href=&quot;#4-静态化&quot; class=&quot;headerlink&quot; title=&quot;4.静态化&quot;&gt;&lt;/a&gt;4.静态化&lt;/h2&gt;&lt;p&gt;两种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Wordpress静态化插件：对每一篇新文章时自动生成静态页面&lt;/li&gt;
&lt;li&gt;服务器每次接收到对这个页面的请求，就给出这个页面的静态文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;加快访问速度&lt;/li&gt;
&lt;li&gt;减轻服务器压力&lt;/li&gt;
&lt;li&gt;抵御DDoS攻击&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;5-浏览器缓存&quot;&gt;&lt;a href=&quot;#5-浏览器缓存&quot; class=&quot;headerlink&quot; title=&quot;5.浏览器缓存&quot;&gt;&lt;/a&gt;5.浏览器缓存&lt;/h2&gt;&lt;p&gt;浏览器可以根据HTTPS头部中的指令来缓存数据，一般有两种办法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Expire&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Expires: Thu, 15 Apr 2020 20:00:00 GMT&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;浏览器发送请求从缓存中获取数据&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;200 (from &lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;cache&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Last-Modified&lt;br&gt;对有可能过期的请求，&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Last-Modified: Tue, 01 Mar 2015 03:42:36 GMT&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果3月10号浏览器命中了这个资源，就会发起一个HTTP请求去询问服务器，该资源是否被修改。&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;If-Modified-Since: Tue, 01 Mar 2015 03:42:36 GMT&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果服务器回答&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//没有被修改&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;304&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;说明该资源没有被更新，浏览器可以直接使用缓存资源。这样的好处是服务器只需要发送一个HTTPS头部，而不需要把文件内容发送回去。&lt;br&gt;如果修改了，服务器回答&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//修改了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;200&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;6-Cache-Control&quot;&gt;&lt;a href=&quot;#6-Cache-Control&quot; class=&quot;headerlink&quot; title=&quot;6. Cache-Control&quot;&gt;&lt;/a&gt;6. Cache-Control&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Expire, Cache-Control的设置是:max-age=77760000.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于Last-Modified, Cache-Control的处理办法是修改query string&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http://server/path/?query_string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 对于HTTP规范来说，修改了query string，就相当于请求一个新的文件。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Best Practices&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.动态生成的HTML, HTTPS头：&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Cache&lt;/span&gt;-control: &lt;span class=&quot;keyword&quot;&gt;no&lt;/span&gt;-&lt;span class=&quot;keyword&quot;&gt;cache&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt;静态HTML页面，&lt;span class=&quot;keyword&quot;&gt;HTTP&lt;/span&gt;头：&lt;span class=&quot;keyword&quot;&gt;Last&lt;/span&gt;-Modified.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;其他文件类型设置Expires头，并在文件内容有修改的时候修改&lt;span class=&quot;keyword&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;String&lt;/span&gt;。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-数据库查询缓存&quot;&gt;&lt;a href=&quot;#1-数据库查询缓存&quot; class=&quot;headerlink&quot; title=&quot;1. 数据库查询缓存&quot;&gt;&lt;/a&gt;1. 数据库查询缓存&lt;/h2&gt;&lt;p&gt;Mysql 缓存&lt;/p&gt;
&lt;figure class=&quot;highlight sq
    
    </summary>
    
      <category term="Self improvement" scheme="http://yoursite.com/categories/Self-improvement/"/>
    
    
      <category term="Developer" scheme="http://yoursite.com/tags/Developer/"/>
    
      <category term="Management" scheme="http://yoursite.com/tags/Management/"/>
    
  </entry>
  
  <entry>
    <title>web全栈工程师自我修养 3 软件设计方法</title>
    <link href="http://yoursite.com/2016/04/25/Full%20stack%20developer%203/"/>
    <id>http://yoursite.com/2016/04/25/Full stack developer 3/</id>
    <published>2016-04-25T08:14:52.284Z</published>
    <updated>2016-04-25T08:14:52.284Z</updated>
    
    <content type="html">&lt;h1 id=&quot;1-设计模式&quot;&gt;&lt;a href=&quot;#1-设计模式&quot; class=&quot;headerlink&quot; title=&quot;1. 设计模式&quot;&gt;&lt;/a&gt;1. 设计模式&lt;/h1&gt;&lt;h2 id=&quot;1-1-创建型模式&quot;&gt;&lt;a href=&quot;#1-1-创建型模式&quot; class=&quot;headerlink&quot; title=&quot;1.1 创建型模式&quot;&gt;&lt;/a&gt;1.1 创建型模式&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;对实例化过程进行了抽象。&lt;/li&gt;
&lt;li&gt;对对象的创建过程进行了封装，客户程序不需要关心创建对象中的逻辑。&lt;/li&gt;
&lt;li&gt;单例模式，工厂方法，抽象工厂， 建造模式，原型模式，对象池模式，多例模式。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;1-2-结构型模式&quot;&gt;&lt;a href=&quot;#1-2-结构型模式&quot; class=&quot;headerlink&quot; title=&quot;1.2 结构型模式&quot;&gt;&lt;/a&gt;1.2 结构型模式&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;解决类，对象，模块之间的耦合关系。&lt;/li&gt;
&lt;li&gt;适配器模式，桥接模式，组合模式，装饰模式，外观模式，享元模式和代理模式。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;1-3-行为型模式&quot;&gt;&lt;a href=&quot;#1-3-行为型模式&quot; class=&quot;headerlink&quot; title=&quot;1.3 行为型模式&quot;&gt;&lt;/a&gt;1.3 行为型模式&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;用来识别对象之间的常用交流模式加以实现。&lt;/li&gt;
&lt;li&gt;比如观察者模式： 一个目标对象管理者所有依赖它的观察者对象，并且在它本身状态改变时主动发出通知。&lt;/li&gt;
&lt;li&gt;黑板，责任链， 命令，解释器，迭代器，中介者，备忘录，空对象，模板方法和访问者。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;2-架构模式&quot;&gt;&lt;a href=&quot;#2-架构模式&quot; class=&quot;headerlink&quot; title=&quot;2. 架构模式&quot;&gt;&lt;/a&gt;2. 架构模式&lt;/h1&gt;&lt;h2 id=&quot;2-1-MVC模式&quot;&gt;&lt;a href=&quot;#2-1-MVC模式&quot; class=&quot;headerlink&quot; title=&quot;2.1 MVC模式&quot;&gt;&lt;/a&gt;2.1 MVC模式&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Model-View-Controller&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;3-设计原则&quot;&gt;&lt;a href=&quot;#3-设计原则&quot; class=&quot;headerlink&quot; title=&quot;3. 设计原则&quot;&gt;&lt;/a&gt;3. 设计原则&lt;/h1&gt;&lt;h2 id=&quot;3-1-DRY-（Dont-Repeat-Yourself）&quot;&gt;&lt;a href=&quot;#3-1-DRY-（Dont-Repeat-Yourself）&quot; class=&quot;headerlink&quot; title=&quot;3.1 DRY （Dont Repeat Yourself）&quot;&gt;&lt;/a&gt;3.1 DRY （Dont Repeat Yourself）&lt;/h2&gt;&lt;p&gt;对于任何数据或者变量，都应该配置在有且只有一个地方，其他的地方都应该引用这里的数据。这样，需要改动数据的时候，只需要调整这一处，所有的地方修改都会变更过来。&lt;/p&gt;
&lt;h3 id=&quot;3-2-三次法则（Rule-of-three）&quot;&gt;&lt;a href=&quot;#3-2-三次法则（Rule-of-three）&quot; class=&quot;headerlink&quot; title=&quot;3.2 三次法则（Rule of three）&quot;&gt;&lt;/a&gt;3.2 三次法则（Rule of three）&lt;/h3&gt;&lt;p&gt;如果相同的代码片段重复三次以上，就需要将其提取出来做一个子程序。&lt;/p&gt;
&lt;h3 id=&quot;3-3-惯例由于配置-（Convention-Over-Configuration）&quot;&gt;&lt;a href=&quot;#3-3-惯例由于配置-（Convention-Over-Configuration）&quot; class=&quot;headerlink&quot; title=&quot;3.3 惯例由于配置 （Convention Over Configuration）&quot;&gt;&lt;/a&gt;3.3 惯例由于配置 （Convention Over Configuration）&lt;/h3&gt;&lt;p&gt;开发人员仅需规定应用中不符约定的部分。 例如如果名为Sale的Model对应的DB表名为sale作为约定，那么只需要把所有不符合这一约定（e.g. 表名为products_sold）写入相关的配置。&lt;/p&gt;
&lt;h3 id=&quot;3-4-KISS原则（Keep-it-simple，-stupid）&quot;&gt;&lt;a href=&quot;#3-4-KISS原则（Keep-it-simple，-stupid）&quot; class=&quot;headerlink&quot; title=&quot;3.4 KISS原则（Keep it simple， stupid）&quot;&gt;&lt;/a&gt;3.4 KISS原则（Keep it simple， stupid）&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;大部分系统的设计应该遵循简单原则，有不必要的复杂性就都应该避免。&lt;/li&gt;
&lt;li&gt;如果一个系统非常复杂，应该分解为多个简单的组件，做好足够的分解和抽象。&lt;/li&gt;
&lt;li&gt;简单系统的好处&lt;br&gt; a. 容易构造、维护和运行&lt;br&gt; b. 系统具有弹性和柔性&lt;br&gt; c. 系统更便宜&lt;br&gt; d. 更柔已实现.&lt;br&gt; e. 更容易分阶段执行.&lt;br&gt; f. 更容易理解&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;3-5-最少知道原则-Least-Knowledge-Principle&quot;&gt;&lt;a href=&quot;#3-5-最少知道原则-Least-Knowledge-Principle&quot; class=&quot;headerlink&quot; title=&quot;3.5 最少知道原则 (Least Knowledge Principle)&quot;&gt;&lt;/a&gt;3.5 最少知道原则 (Least Knowledge Principle)&lt;/h3&gt;&lt;p&gt;“松耦合原则”&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#27599;&amp;#19968;&amp;#20010;&amp;#21333;&amp;#20803;&amp;#37117;&amp;#24212;&amp;#35813;&amp;#21482;&amp;#30693;&amp;#36947;&amp;#20851;&amp;#20110;&amp;#20854;&amp;#20182;&amp;#21333;&amp;#20803;&amp;#30340;&amp;#26377;&amp;#38480;&amp;#20449;&amp;#24687;&amp;#65306;&amp;#37027;&amp;#20123;&amp;#19982;&amp;#33258;&amp;#24049;&amp;#23494;&amp;#20999;&amp;#30456;&amp;#20851;&amp;#30340;&amp;#21333;&amp;#20803;&amp;#12290;&amp;#27599;&amp;#19968;&amp;#20010;&amp;#21333;&amp;#20803;&amp;#24212;&amp;#35813;&amp;#21644;&amp;#33258;&amp;#24049;&amp;#30340;&amp;#26379;&amp;#21451;&amp;#35828;&amp;#35805;&amp;#65292;&amp;#19981;&amp;#21644;&amp;#38476;&amp;#29983;&amp;#20154;&amp;#35828;&amp;#35805;&amp;#12290;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对象都暴露少数对外的API， 而隐藏了自己的内部结构和实现原理。类在重构的时候，只需要保持API不变。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-设计模式&quot;&gt;&lt;a href=&quot;#1-设计模式&quot; class=&quot;headerlink&quot; title=&quot;1. 设计模式&quot;&gt;&lt;/a&gt;1. 设计模式&lt;/h1&gt;&lt;h2 id=&quot;1-1-创建型模式&quot;&gt;&lt;a href=&quot;#1-1-创建型模式&quot; class=&quot;headerli
    
    </summary>
    
      <category term="Self improvement" scheme="http://yoursite.com/categories/Self-improvement/"/>
    
    
      <category term="Developer" scheme="http://yoursite.com/tags/Developer/"/>
    
      <category term="Management" scheme="http://yoursite.com/tags/Management/"/>
    
  </entry>
  
  <entry>
    <title>web全栈工程师自我修养 2 大前端</title>
    <link href="http://yoursite.com/2016/04/25/Full%20stack%20developer%202/"/>
    <id>http://yoursite.com/2016/04/25/Full stack developer 2/</id>
    <published>2016-04-25T08:12:06.746Z</published>
    <updated>2016-04-25T08:12:06.746Z</updated>
    
    <content type="html">&lt;h2 id=&quot;1-前端工程师&quot;&gt;&lt;a href=&quot;#1-前端工程师&quot; class=&quot;headerlink&quot; title=&quot;1. 前端工程师&quot;&gt;&lt;/a&gt;1. 前端工程师&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;移动开发变得逐渐重要。&lt;/li&gt;
&lt;li&gt;Grunt可以简化发布流程&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;2-知识体系&quot;&gt;&lt;a href=&quot;#2-知识体系&quot; class=&quot;headerlink&quot; title=&quot;2. 知识体系&quot;&gt;&lt;/a&gt;2. 知识体系&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;中级工程师&lt;ul&gt;
&lt;li&gt;代码质量、规范&lt;/li&gt;
&lt;li&gt;单元测试的熟悉&lt;/li&gt;
&lt;li&gt;性能优化&lt;/li&gt;
&lt;li&gt;SEO的应用和理解&lt;/li&gt;
&lt;li&gt;代码部署&lt;/li&gt;
&lt;li&gt;移动Web&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;高级工程师&lt;ul&gt;
&lt;li&gt;代码架构&lt;/li&gt;
&lt;li&gt;安全&lt;/li&gt;
&lt;li&gt;自动化测试的理解&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#36234;&amp;#25509;&amp;#36817;&amp;#39640;&amp;#32423;&amp;#24037;&amp;#31243;&amp;#24072;&amp;#65292;&amp;#24212;&amp;#35813;&amp;#23545;&amp;#26576;&amp;#20010;&amp;#28857;&amp;#30340;&amp;#26412;&amp;#36136;&amp;#36234;&amp;#29702;&amp;#35299;&amp;#65292;&amp;#32780;&amp;#19988;&amp;#33021;&amp;#22312;&amp;#39033;&amp;#30446;&amp;#21644;&amp;#22242;&amp;#38431;&amp;#20013;&amp;#36215;&amp;#21040;&amp;#24341;&amp;#23548;&amp;#20316;&amp;#29992;&amp;#65292;&amp;#32780;&amp;#19981;&amp;#26159;&amp;#23545;&amp;#26576;&amp;#24037;&amp;#20855;&amp;#30340;&amp;#20351;&amp;#29992;&amp;#32463;&amp;#39564;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-前端工程师&quot;&gt;&lt;a href=&quot;#1-前端工程师&quot; class=&quot;headerlink&quot; title=&quot;1. 前端工程师&quot;&gt;&lt;/a&gt;1. 前端工程师&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;移动开发变得逐渐重要。&lt;/li&gt;
&lt;li&gt;Grunt可以简化发布流程&lt;/li&gt;
&lt;/
    
    </summary>
    
      <category term="Self improvement" scheme="http://yoursite.com/categories/Self-improvement/"/>
    
    
      <category term="Developer" scheme="http://yoursite.com/tags/Developer/"/>
    
      <category term="Management" scheme="http://yoursite.com/tags/Management/"/>
    
  </entry>
  
</feed>
